<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="db55602a-0bc9-4e05-a0aa-e09459bcf0c8" name="Default Changelist" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="ProjectId" id="1RbMTDzUVqfKDkCsv4kn9BwRq8j" />
  <component name="PropertiesComponent">
    <property name="cursive.last.file.extension./Users/aluralaranja/Documents/Guilherme/datomic3-diaadia/projeto/ecommerce/src" value="clj" />
    <property name="cursive.last.file.extension./Users/aluralaranja/Documents/Guilherme/datomic4-xp/projeto/ecommerce/src" value="clj" />
    <property name="cursive.last.file.extension./Users/aluralaranja/Documents/Guilherme/datomic5-avancando/projeto/ecommerce/src" value="clj" />
    <property name="cursive.last.file.extension./Users/aluralaranja/Documents/Guilherme/datomic6/projeto/ecommerce/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
  </component>
  <component name="ReplState" timestamp="1570642783411">{:repl-history {:ide [], :local [{:command &quot;(ns ecommerce.aula1\n  (:use clojure.pprint)\n  (:require [datomic.api :as d]\n            [ecommerce.db :as db]\n            [ecommerce.model :as model]))&quot;, :offset 151, :ns &quot;ecommerce.core&quot;} {:command &quot;(def computador (model/novo-produto (model/uuid) \&quot;Computador Novo\&quot;, \&quot;/computador-novo\&quot;, 2500.10M))&quot;, :offset 98, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (s/validate model/Produto (assoc computador :produto/preco 76)))&quot;, :offset 72, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(def eletronicos (model/nova-categoria \&quot;Eletrônicos\&quot;))&quot;, :offset 54, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (s/validate Categoria eletronicos))&quot;, :offset 43, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (s/validate model/Categoria eletronicos))&quot;, :offset 49, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (s/validate model/Produto computador))&quot;, :offset 46, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (s/validate model/Produto (assoc computador :produto/categoriaz eletronicos)))&quot;, :offset 86, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (s/validate model/Produto (assoc computador :produto/categoria 14)))&quot;, :offset 76, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (s/validate model/Produto (assoc computador :produto/categoria eletronicos)))&quot;, :offset 85, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(ns ecommerce.aula1\n  (:use clojure.pprint)\n  (:require [datomic.api :as d]\n            [ecommerce.db :as db]\n            [ecommerce.model :as model]\n            [schema.core :as s]))&quot;, :offset 183, :ns &quot;ecommerce.core&quot;} {:command &quot;(defn testa-schema []\n  (def computador (model/novo-produto (model/uuid) \&quot;Computador Novo\&quot;, \&quot;/computador-novo\&quot;, 2500.10M))\n  (pprint (s/validate model/Produto computador))\n  ;(pprint (s/validate model/Produto (assoc computador :produto/preco 76)))\n\n  (def eletronicos (model/nova-categoria \&quot;Eletrônicos\&quot;))\n  (pprint (s/validate model/Categoria eletronicos))\n  (pprint (s/validate model/Produto (assoc computador :produto/categoria eletronicos))))&quot;, :offset 446, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(testa-schema)&quot;, :offset 14, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(s/set-fn-validation! false)&quot;, :offset 28, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(def dama {:produto/nome  \&quot;Dama\&quot;\n      :produto/slug  \&quot;/dama\&quot;\n      :produto/preco 15.5M\n      :produto/id    (model/uuid)} )&quot;, :offset 125, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(db/adiciona-produtos! conn [dama])&quot;, :offset 35, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(db/adiciona-produtos! conn [(assoc dama :produto/slug \&quot;/jogo-de-dama\&quot;)])&quot;, :offset 73, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(db/adiciona-produtos! conn [(assoc dama :produto/preco 150.5M)])&quot;, :offset 65, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(defn atualiza-preco []\n  (println \&quot;atualizando preco\&quot;)\n  (let [produto (db/um-produto (d/db conn) (:produto/id dama))\n        produto (assoc produto :produto/preco 999M)]\n    (db/adiciona-ou-altera-produtos! conn [produto])\n    (println \&quot;Atualizado preco\&quot;)))&quot;, :offset 259, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(defn atualiza-slug []\n  (println \&quot;atualizando slug\&quot;)\n  (let [produto (db/um-produto (d/db conn) (:produto/id dama))]\n    (Thread/sleep 3000)\n    (let [produto (assoc produto :produto/slug \&quot;/jogo-de-dama-carinho\&quot;)]\n      (db/adiciona-ou-altera-produtos! conn [produto])\n      (println \&quot;Atualizado slug\&quot;))))&quot;, :offset 306, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(ns ecommerce.aula2\n  (:use clojure.pprint)\n  (:require [datomic.api :as d]\n            [ecommerce.db :as db]\n            [ecommerce.model :as model]\n            [schema.core :as s]))&quot;, :offset 183, :ns &quot;ecommerce.core&quot;} {:command &quot;(s/set-fn-validation! true)&quot;, :offset 27, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(db/apaga-banco!)&quot;, :offset 17, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(def conn (db/abre-conexao!))&quot;, :offset 29, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(db/cria-schema! conn)&quot;, :offset 22, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(db/cria-dados-de-exemplo conn)&quot;, :offset 31, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint (db/todas-as-categorias (d/db conn)))&quot;, :offset 45, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(def dama {:produto/nome  \&quot;Dama\&quot;\n           :produto/slug  \&quot;/dama\&quot;\n           :produto/preco 15.5M\n           :produto/id    (model/uuid)})&quot;, :offset 139, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(db/adiciona-ou-altera-produtos! conn [dama])&quot;, :offset 45, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint (db/um-produto (d/db conn) (:produto/id dama)))&quot;, :offset 55, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(defn atualiza-preco-inteligente []\n  (println \&quot;atualizando preco\&quot;)\n  (let [produto {:produto/id (:produto/id dama), :produto/preco 111M}]\n    (db/adiciona-ou-altera-produtos! conn [produto])\n    (println \&quot;Atualizado preco\&quot;)\n    produto))&quot;, :offset 238, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(defn atualiza-slug-inteligente []\n  (println \&quot;atualizando slug\&quot;)\n  (let [produto {:produto/id (:produto/id dama), :produto/slug \&quot;/dama-com-slug-novo\&quot;}]\n    (Thread/sleep 3000)\n    (db/adiciona-ou-altera-produtos! conn [produto])\n    (println \&quot;Atualizado slug\&quot;)\n    produto))&quot;, :offset 275, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(roda-transacoes [atualiza-preco-inteligente atualiza-slug-inteligente])&quot;, :offset 72, :ns &quot;ecommerce.aula2&quot;} {:command &quot;*e&quot;, :offset 2, :ns &quot;ecommerce.core&quot;} {:command &quot;(def produtos (db/todos-os-produtos (d/db conn)))&quot;, :offset 49, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(:produto/id primeiro-produto)&quot;, :offset 30, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(def primeiro-produto (first produtos))&quot;, :offset 39, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint primeiro-produto)&quot;, :offset 25, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/um-produto (d/db conn) 786923))&quot;, :offset 43, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/um-produto (d/db conn) (:produto/id primeiro-produto)))&quot;, :offset 67, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/um-produto (d/db conn) (model/uuid)))&quot;, :offset 49, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/um-produto! (d/db conn) (:produto/id primeiro-produto)))&quot;, :offset 68, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/um-produto! (d/db conn) (model/uuid)))&quot;, :offset 50, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/todos-os-produtos-nas-categorias (d/db conn) [\&quot;Eletrônicos\&quot; \&quot;Esporte\&quot;]))&quot;, :offset 84, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (db/todos-os-produtos-nas-categorias (d/db conn) [\&quot;Esporte\&quot;]))&quot;, :offset 70, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (db/todos-os-produtos-nas-categorias (d/db conn) []))&quot;, :offset 61, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (db/todos-os-produtos-nas-categorias (d/db conn) [\&quot;Alimentação\&quot;]))&quot;, :offset 74, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (db/todos-os-produtos-nas-categorias-e-digital (d/db conn) [\&quot;Esporte\&quot;] true))&quot;, :offset 85, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (db/todos-os-produtos-nas-categorias-e-digital (d/db conn) [\&quot;Esporte\&quot;] false))&quot;, :offset 86, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (db/todos-os-produtos-nas-categorias (d/db conn) [\&quot;Eletrônicos\&quot; \&quot;Alimentação\&quot;]))&quot;, :offset 88, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint (db/todos-os-produtos-nas-categorias-e-digital (d/db conn) [\&quot;Eletrônicos\&quot;] true))&quot;, :offset 89, :ns &quot;ecommerce.aula1&quot;} {:command &quot;(pprint @(db/atualiza-preco conn (:produto/id primeiro) 30M 35M))&quot;, :offset 65, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint @(db/atualiza-preco conn (:produto/id primeiro) 30M 45M))&quot;, :offset 65, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(def segundo (second segundo))&quot;, :offset 30, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(def segundo (second produtos))&quot;, :offset 31, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint segundo)&quot;, :offset 16, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(def a-atualizar { :produto/id (:produto/id segundo) :produto/preco 3000M, :produto/estoque 8 })&quot;, :offset 96, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(keys {:produto/preco 250 :produto/slug :a})&quot;, :offset 44, :ns &quot;ecommerce.core&quot;} {:command &quot;(type (keys {:produto/preco 250 :produto/slug :a}))&quot;, :offset 51, :ns &quot;ecommerce.core&quot;} {:command &quot;(set (keys {:produto/preco 250 :produto/slug :a}))&quot;, :offset 50, :ns &quot;ecommerce.core&quot;} {:command &quot;(db/atualiza-produto! conn segundo a-atualizar)&quot;, :offset 47, :ns &quot;ecommerce.aula2&quot;} {:command &quot;segundo&quot;, :offset 7, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint @(db/atualiza-produto! conn segundo a-atualizar))&quot;, :offset 57, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint (db/adiciona-variacao! conn (:produto/id primeiro) \&quot;Season pass\&quot; 40M))&quot;, :offset 78, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/adiciona-variacao! conn (:produto/id primeiro) \&quot;Season pass 4 anos\&quot; 60M))&quot;, :offset 85, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (d/q '[:find (pull ?produto [*])\n               :where [?produto :produto/nome]]\n             (d/db conn)))&quot;, :offset 115, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/todos-os-produtos (d/db conn)))&quot;, :offset 43, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(defn total-de-produtos [db]\n  (d/q '[:find [(count ?produto) .]\n         :where [?produto :produto/nome]]\n       db))&quot;, :offset 118, :ns &quot;ecommerce.db&quot;} {:command &quot;(pprint (db/remove-produto! conn (:produto/id primeiro)))&quot;, :offset 57, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/total-de-produtos (d/db conn)))&quot;, :offset 43, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (d/q '[:find ?name\n               :where [_ :variacao/nome ?nome]]\n             (d/db conn)))&quot;, :offset 101, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (d/q '[:find ?nome\n               :where [_ :variacao/nome ?nome]]\n             (d/db conn)))&quot;, :offset 101, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (db/um-produto (d/db conn) primeiro))&quot;, :offset 45, :ns &quot;ecommerce.aula4&quot;} {:command &quot;(pprint (db/visualizacao! conn (:produto/id primeiro)))&quot;, :offset 55, :ns &quot;ecommerce.aula4&quot;} {:command &quot;(def ola\n  (d/function '{:lang   :clojure\n                :params [nome]\n                :code   (str \&quot;Olá \&quot; nome)}))&quot;, :offset 117, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(def db-adds\n  #db/fn '{:lang   :clojure\n           :params [entidade valor]\n           :code   [[:db/add entidade :produto/visualizacoes valor]]})&quot;, :offset 147, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(def incrementa-visualizacao\n  #db/fn {\n          :lang :clojure\n          :params [nome]\n          :code (str \&quot;Olá\&quot; nome)\n          })&quot;, :offset 135, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(def incrementa-visualizacao\n  #db/fn {\n          :lang   :clojure\n          :params [db produto-id]\n          :code\n                  (let [visualizacoes (d/q '[:find ?visualizacoes .\n                                             :in $ ?id\n                                             :where [?produto :produto/id ?id]\n                                             [?produto :produto/visualizacoes ?visualizacoes]]\n                                           db produto-id)\n                        atual (or visualizacoes 0)\n                        total-novo (inc atual)]\n                    [{:produto/id            produto-id\n                      :produto/visualizacoes total-novo}])})&quot;, :offset 687, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(pprint (d/transact\n          conn\n          [{:db/doc   \&quot;Incrementa o atributo :produto/visualizacoes de uma entidade\&quot;\n            :db/ident :incrementa-visualizacao\n            :db/fn    incrementa-visualizacao}]))&quot;, :offset 216, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(dotimes [n 10] (db/visualizacao! conn (:produto/id primeiro)))&quot;, :offset 63, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(pprint (db/um-produto (d/db conn) (:produto/id primeiro)))&quot;, :offset 59, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(pprint (db.venda/adiciona! conn (:produto/id primeiro) 3))&quot;, :offset 59, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint @(db.venda/adiciona! conn (:produto/id primeiro) 3))&quot;, :offset 60, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint @(db.venda/adiciona! conn (:produto/id primeiro) 4))&quot;, :offset 60, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint @(db.produto/adiciona-ou-altera! conn [{:produto/id    (:produto/id primeiro)\n                                                :produto/preco 300M}]))&quot;, :offset 157, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint (db.venda/custo (d/db conn) venda1))&quot;, :offset 44, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint (db.venda/custo (d/db conn) venda2))&quot;, :offset 44, :ns &quot;ecommerce.aula2&quot;} {:command &quot;(pprint (d/q '[:find ?tx\n               :in $ ?id\n               :where [_ :venda/id ?id ?tx true]]\n             (d/db conn) venda1))&quot;, :offset 133, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (d/q '[:find ?atributo ?valor\n               :in $ ?id\n               :where [_ :venda/id ?id ?tx true]\n               [?tx ?atributo ?valor]]\n             (d/db conn) venda1))&quot;, :offset 184, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(pprint (d/q '[:find ?instante .\n               :in $ ?id\n               :where [_ :venda/id ?id ?tx true]\n               [?tx :db/txInstant ?instante]]\n             (d/db conn) venda1))&quot;, :offset 186, :ns &quot;ecommerce.aula3&quot;} {:command &quot;(db.venda/todas (d/db conn))&quot;, :offset 28, :ns &quot;ecommerce.aula4&quot;} {:command &quot;(pprint (db.venda/todas (d/db conn)))&quot;, :offset 37, :ns &quot;ecommerce.aula4&quot;} {:command &quot;(pprint (count (db.venda/todas (d/db conn))))&quot;, :offset 45, :ns &quot;ecommerce.aula4&quot;} {:command &quot;(pprint (count (db.venda/todas-inclusive-canceladas (d/db conn))))&quot;, :offset 66, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(pprint (count (db.venda/canceladas (d/db conn))))&quot;, :offset 50, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(pprint (db.venda/historico-geral (d/db conn) #inst \&quot;2011-10-09T15:00:59.443-00:00\&quot;))&quot;, :offset 85, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(pprint (db.venda/historico-geral (d/db conn) #inst \&quot;2019-10-09T15:13:13.739-00:00\&quot;))&quot;, :offset 85, :ns &quot;ecommerce.aula5&quot;} {:command &quot;(pprint (db.venda/historico-geral (d/db conn) #inst \&quot;2019-10-09T15:22:27.518-00:00\&quot;))&quot;, :offset 85, :ns &quot;ecommerce.aula5&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL for ecommerce" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="ecommerce" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for ecommerce" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="db55602a-0bc9-4e05-a0aa-e09459bcf0c8" name="Default Changelist" comment="" />
      <created>1569931347495</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1569931347495</updated>
    </task>
    <servers />
  </component>
</project>